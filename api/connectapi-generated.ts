/* tslint:disable */
/* eslint-disable */
/*
RIBBIT API v4

ValidiFI, an analytics and technology company, connects bank account and payment insights to help companies in a variety of industries provide more confident, trustworthy and transparent transactions. Our differentiated data, sourced directly from banks, payment processors, and financial platforms helps companies to ensure compliance, mitigate risk, combat fraud, and confidently validate bank account and ownership. For more information, visit ValidiFI.com.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CONNECTApi - axios parameter creator
 * @export
 */
export const CONNECTApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Bank Lookup
         * @summary Bank Lookup
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankLookup: async (search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v4/CONNECT/Banks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v4/CONNECT/Banks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CONNECT Session
         * @summary CONNECT Session
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v4/CONNECT/Session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v4/CONNECT/Session',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Full Account Info from CONNECT Session
         * @summary Get Full Account Info from CONNECT Session
         * @param {string} accountToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullAccountInfo: async (accountToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountToken' is not null or undefined
            assertParamExists('getFullAccountInfo', 'accountToken', accountToken)
            const localVarPath = `/v4/accounts/{accountToken}/export`
                .replace(`{${"accountToken"}}`, encodeURIComponent(String(accountToken !== undefined ? accountToken : `-accountToken-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v4/accounts/{accountToken}/export',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CONNECTApi - functional programming interface
 * @export
 */
export const CONNECTApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CONNECTApiAxiosParamCreator(configuration)
    return {
        /**
         * Bank Lookup
         * @summary Bank Lookup
         * @param {CONNECTApiBankLookupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankLookup(requestParameters: CONNECTApiBankLookupRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankLookup(requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CONNECT Session
         * @summary CONNECT Session
         * @param {CONNECTApiCreateSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(requestParameters: CONNECTApiCreateSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Full Account Info from CONNECT Session
         * @summary Get Full Account Info from CONNECT Session
         * @param {CONNECTApiGetFullAccountInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullAccountInfo(requestParameters: CONNECTApiGetFullAccountInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFullAccountInfo(requestParameters.accountToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CONNECTApi - factory interface
 * @export
 */
export const CONNECTApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CONNECTApiFp(configuration)
    return {
        /**
         * Bank Lookup
         * @summary Bank Lookup
         * @param {CONNECTApiBankLookupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankLookup(requestParameters: CONNECTApiBankLookupRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.bankLookup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * CONNECT Session
         * @summary CONNECT Session
         * @param {CONNECTApiCreateSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(requestParameters: CONNECTApiCreateSessionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createSession(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Full Account Info from CONNECT Session
         * @summary Get Full Account Info from CONNECT Session
         * @param {CONNECTApiGetFullAccountInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullAccountInfo(requestParameters: CONNECTApiGetFullAccountInfoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFullAccountInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bankLookup operation in CONNECTApi.
 * @export
 * @interface CONNECTApiBankLookupRequest
 */
export type CONNECTApiBankLookupRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CONNECTApiBankLookup
    */
    readonly search?: string
    
}

/**
 * Request parameters for createSession operation in CONNECTApi.
 * @export
 * @interface CONNECTApiCreateSessionRequest
 */
export type CONNECTApiCreateSessionRequest = any

/**
 * Request parameters for getFullAccountInfo operation in CONNECTApi.
 * @export
 * @interface CONNECTApiGetFullAccountInfoRequest
 */
export type CONNECTApiGetFullAccountInfoRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CONNECTApiGetFullAccountInfo
    */
    readonly accountToken: string
    
}

/**
 * CONNECTApiGenerated - object-oriented interface
 * @export
 * @class CONNECTApiGenerated
 * @extends {BaseAPI}
 */
export class CONNECTApiGenerated extends BaseAPI {
    /**
     * Bank Lookup
     * @summary Bank Lookup
     * @param {CONNECTApiBankLookupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONNECTApiGenerated
     */
    public bankLookup(requestParameters: CONNECTApiBankLookupRequest = {}, options?: AxiosRequestConfig) {
        return CONNECTApiFp(this.configuration).bankLookup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CONNECT Session
     * @summary CONNECT Session
     * @param {CONNECTApiCreateSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONNECTApiGenerated
     */
    public createSession(requestParameters: CONNECTApiCreateSessionRequest, options?: AxiosRequestConfig) {
        return CONNECTApiFp(this.configuration).createSession(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Full Account Info from CONNECT Session
     * @summary Get Full Account Info from CONNECT Session
     * @param {CONNECTApiGetFullAccountInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONNECTApiGenerated
     */
    public getFullAccountInfo(requestParameters: CONNECTApiGetFullAccountInfoRequest, options?: AxiosRequestConfig) {
        return CONNECTApiFp(this.configuration).getFullAccountInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
