/* tslint:disable */
/* eslint-disable */
/*
RIBBIT API v4

ValidiFI, an analytics and technology company, connects bank account and payment insights to help companies in a variety of industries provide more confident, trustworthy and transparent transactions. Our differentiated data, sourced directly from banks, payment processors, and financial platforms helps companies to ensure compliance, mitigate risk, combat fraud, and confidently validate bank account and ownership. For more information, visit ValidiFI.com.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InsightsApi - axios parameter creator
 * @export
 */
export const InsightsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Insights
         * @summary Get Insights
         * @param {string} inquiryId 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsightById: async (inquiryId: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inquiryId' is not null or undefined
            assertParamExists('getInsightById', 'inquiryId', inquiryId)
            const localVarPath = `/v4/Insights/2/{inquiryId}`
                .replace(`{${"inquiryId"}}`, encodeURIComponent(String(inquiryId !== undefined ? inquiryId : `-inquiryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v4/Insights/2/{inquiryId}',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * BankQUALIFY
         * @summary BankQUALIFY
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitLoanApplication: async (body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v4/Insights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v4/Insights',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsightsApi - functional programming interface
 * @export
 */
export const InsightsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InsightsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Insights
         * @summary Get Insights
         * @param {InsightsApiGetInsightByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInsightById(requestParameters: InsightsApiGetInsightByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInsightById(requestParameters.inquiryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * BankQUALIFY
         * @summary BankQUALIFY
         * @param {InsightsApiSubmitLoanApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitLoanApplication(requestParameters: InsightsApiSubmitLoanApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: any = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitLoanApplication(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InsightsApi - factory interface
 * @export
 */
export const InsightsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InsightsApiFp(configuration)
    return {
        /**
         * Get Insights
         * @summary Get Insights
         * @param {InsightsApiGetInsightByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsightById(requestParameters: InsightsApiGetInsightByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getInsightById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * BankQUALIFY
         * @summary BankQUALIFY
         * @param {InsightsApiSubmitLoanApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitLoanApplication(requestParameters: InsightsApiSubmitLoanApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.submitLoanApplication(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getInsightById operation in InsightsApi.
 * @export
 * @interface InsightsApiGetInsightByIdRequest
 */
export type InsightsApiGetInsightByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof InsightsApiGetInsightById
    */
    readonly inquiryId: string
    
} & any

/**
 * Request parameters for submitLoanApplication operation in InsightsApi.
 * @export
 * @interface InsightsApiSubmitLoanApplicationRequest
 */
export type InsightsApiSubmitLoanApplicationRequest = any

/**
 * InsightsApiGenerated - object-oriented interface
 * @export
 * @class InsightsApiGenerated
 * @extends {BaseAPI}
 */
export class InsightsApiGenerated extends BaseAPI {
    /**
     * Get Insights
     * @summary Get Insights
     * @param {InsightsApiGetInsightByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public getInsightById(requestParameters: InsightsApiGetInsightByIdRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).getInsightById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * BankQUALIFY
     * @summary BankQUALIFY
     * @param {InsightsApiSubmitLoanApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightsApiGenerated
     */
    public submitLoanApplication(requestParameters: InsightsApiSubmitLoanApplicationRequest, options?: AxiosRequestConfig) {
        return InsightsApiFp(this.configuration).submitLoanApplication(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
